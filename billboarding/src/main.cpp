/* P3 materials example - see SetMaterial and fragment shader
CPE 471 Cal Poly Z. Wood + S. Sueda
*/
#include <iostream>
#define GLEW_STATIC
#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include "GLSL.h"
#include "Program.h"
#include "MatrixStack.h"
#include "shape.h"

#define NUM_COORDS (401 * 3)
#define NUM_MULT 6

/* Should I be using shapes?
   Like ... we've only ever imported shapes from files.
   The "shape" is there to interpret the mesh.
   What about what I have now? I just want to draw 4 vectors.
   And I need to do calculations on them.

   Do I know how to do the projection & perspective matrices
   on pure vector lists?

   Lab4 would have non-shape rendering.
   */

using namespace std;
using namespace Eigen;

GLFWwindow *window; // Main application window
string RESOURCE_DIR = ""; // Where the resources are loaded from
shared_ptr<Program> prog;

GLuint AnkleArrayID2;
static const GLfloat g_vertex_ankle_buffer2[] = {
  -1.0f, -1.0f, 0.0f,
  1.0f, -1.0f, 0.0f,
  0.0f, 1.0f, 0.0f,

  1.0f, -1.0f, 0.0f,
  0.0f, 1.0f, 0.0f,
  2.0f, 1.0f, 0.0f
};
GLuint vertexbuffer2;

static GLfloat ankle_buffer[] = {
    1.28916183472,-8.21157104492,8.1089050293,
    1.2803012085,-8.19046569824,8.11358459473,
    1.27313339233,-8.17284545898,8.11409667969,
    1.26733085632,-8.15514648438,8.1127557373,
    1.26167922974,-8.13690917969,8.10910705566,
    1.25671546936,-8.12233886719,8.09972595215,
    1.25235626221,-8.1094354248,8.08478942871,
    1.24712715149,-8.09660644531,8.06748901367,
    1.2419758606,-8.08585693359,8.04565429688,
    1.23889556885,-8.07860046387,8.01920043945,
    1.23769439697,-8.07638244629,7.99161804199,
    1.2387247467,-8.07603149414,7.96242736816,
    1.24350219727,-8.07632080078,7.9334387207,
    1.25209510803,-8.08164855957,7.90945922852,
    1.26332801819,-8.09243164062,7.89008483887,
    1.27679122925,-8.10503051758,7.87247680664,
    1.29377120972,-8.11782653809,7.85934326172,
    1.31467071533,-8.13150756836,7.85282287598,
    1.33622436523,-8.14679382324,7.85204101562,
    1.35658126831,-8.16472900391,7.85702697754,
    1.37839477539,-8.1842755127,7.86653015137,
    1.40069900513,-8.20493652344,7.8802130127,
    1.4229208374,-8.22743041992,7.89734375,
    1.44356369019,-8.24715576172,7.91737487793,
    1.4560874939,-8.26303588867,7.94011108398,
    1.46127365112,-8.28159545898,7.96062255859,
    1.46097259521,-8.30184753418,7.9754083252,
    1.45377563477,-8.31850708008,7.98534545898,
    1.44175338745,-8.33374694824,7.98787658691,
    1.42571334839,-8.34902954102,7.98103515625,
    1.40492172241,-8.36348999023,7.96642456055,
    1.37967773438,-8.37828857422,7.9431262207,
    1.35040664673,-8.39207824707,7.91113464355,
    1.31728469849,-8.40192443848,7.87271850586,
    1.27880065918,-8.4090246582,7.82900512695,
    1.2330721283,-8.4171081543,7.78239074707,
    1.1811920166,-8.4219317627,7.73676391602,
    1.12651313782,-8.42179016113,7.69451599121,
    1.07044151306,-8.42156311035,7.65866027832,
    1.01343399048,-8.41862304688,7.63302978516,
    0.956526489258,-8.41229614258,7.62154541016,
    0.901835327148,-8.40624084473,7.62840698242,
    0.855773086548,-8.40141601562,7.65693115234,
    0.824508056641,-8.39607299805,7.7112097168,
    0.806699447632,-8.39026000977,7.79349243164,
    0.795303268433,-8.38871765137,7.89966552734,
    0.788799209595,-8.39702392578,8.02510070801,
    0.791455764771,-8.41559204102,8.1679510498,
    0.806481246948,-8.43680175781,8.32430908203,
    0.834977111816,-8.45528076172,8.49092468262,
    0.873560409546,-8.4708807373,8.66501647949,
    0.919066772461,-8.48354125977,8.84353271484,
    0.972243118286,-8.49145446777,9.02568725586,
    1.03457061768,-8.49143859863,9.21184143066,
    1.10631317139,-8.47895935059,9.40198425293,
    1.18571395874,-8.45268493652,9.59297851562,
    1.26665206909,-8.41688171387,9.7818536377,
    1.34189910889,-8.37339477539,9.96587585449,
    1.40800888062,-8.31933837891,10.1413781738,
    1.46564865112,-8.25638122559,10.3076062012,
    1.51642578125,-8.18992675781,10.4609387207,
    1.55746963501,-8.11873413086,10.5974731445,
    1.58952484131,-8.04092590332,10.7180541992,
    1.61379867554,-7.95816589355,10.8206140137,
    1.6276210022,-7.87250427246,10.9034838867,
    1.63283416748,-7.78588439941,10.9689526367,
    1.62997329712,-7.70125366211,11.0191955566,
    1.61804611206,-7.62089538574,11.0561779785,
    1.59867965698,-7.54389892578,11.0815441895,
    1.571434021,-7.47165161133,11.0958557129,
    1.53635467529,-7.40365600586,11.1002819824,
    1.49932617188,-7.33701049805,11.0984838867,
    1.46544555664,-7.27325317383,11.0958850098,
    1.4375062561,-7.21249755859,11.0984069824,
    1.41781433105,-7.15565185547,11.1095336914,
    1.40491744995,-7.10373168945,11.1296044922,
    1.39461914062,-7.05380065918,11.1581396484,
    1.38385971069,-7.00584716797,11.1955029297,
    1.37104187012,-6.96270019531,11.2431787109,
    1.35360748291,-6.92387329102,11.3010302734,
    1.33137741089,-6.88867797852,11.3670996094,
    1.30789871216,-6.86067199707,11.4407922363,
    1.28573013306,-6.83858093262,11.5206750488,
    1.26369476318,-6.82109741211,11.6029321289,
    1.24015068054,-6.80965820312,11.6831237793,
    1.21485580444,-6.80266662598,11.7576721191,
    1.18817626953,-6.79741699219,11.8233081055,
    1.15966995239,-6.79136230469,11.8782714844,
    1.12978294373,-6.7872467041,11.9229406738,
    1.10123512268,-6.78680419922,11.9559545898,
    1.07500450134,-6.78784606934,11.9765222168,
    1.05046134949,-6.78782836914,11.9849475098,
    1.02743759155,-6.78618530273,11.9802893066,
    1.00556221008,-6.7868145752,11.9622155762,
    0.984370651245,-6.78909606934,11.9327209473,
    0.965991592407,-6.79110839844,11.8941638184,
    0.952006378174,-6.79434631348,11.846796875,
    0.941036987305,-6.7971661377,11.7913293457,
    0.932088928223,-6.80115722656,11.7306164551,
    0.925422897339,-6.80919677734,11.6660144043,
    0.922249221802,-6.81910644531,11.598626709,
    0.921870040894,-6.83177734375,11.5334924316,
    0.921619110107,-6.84701904297,11.4742016602,
    0.920311889648,-6.86309387207,11.4210766602,
    0.917667922974,-6.88372314453,11.379329834,
    0.91218963623,-6.91096923828,11.3550354004,
    0.902143478394,-6.94413024902,11.3485314941,
    0.887060012817,-6.9822052002,11.3600219727,
    0.867352752686,-7.02373840332,11.3908642578,
    0.841558990479,-7.06863464355,11.4387915039,
    0.80915145874,-7.11671875,11.5001818848,
    0.773686599731,-7.16492248535,11.5733203125,
    0.736156768799,-7.21301879883,11.6554077148,
    0.696099243164,-7.2645111084,11.7439318848,
    0.655302429199,-7.31825866699,11.8362365723,
    0.614171791077,-7.3721875,11.9277685547,
    0.572062759399,-7.4265057373,12.0148632812,
    0.528918266296,-7.47990722656,12.09578125,
    0.485107421875,-7.53247131348,12.1687329102,
    0.440672683716,-7.58476501465,12.2303271484,
    0.394923439026,-7.63595153809,12.2783959961,
    0.348670921326,-7.68528137207,12.3088464355,
    0.304033317566,-7.73189697266,12.3186413574,
    0.260176124573,-7.77926879883,12.3115563965,
    0.215076007843,-7.82998413086,12.2879846191,
    0.170812091827,-7.88026794434,12.2450048828,
    0.128286371231,-7.92894592285,12.1857836914,
    0.0835671710968,-7.97925048828,12.1165270996,
    0.0341921305656,-8.03143737793,12.0398974609,
    -0.0224434542656,-8.08447631836,11.9580407715,
    -0.0904482078552,-8.13588256836,11.8736877441,
    -0.170308837891,-8.17917297363,11.7867724609,
    -0.262207603455,-8.21288330078,11.6989440918,
    -0.367768058777,-8.24145202637,11.6148962402,
    -0.489263839722,-8.26763061523,11.5384399414,
    -0.630698661804,-8.28991577148,11.472791748,
    -0.791400985718,-8.30207580566,11.4186132812,
    -0.970439834595,-8.29757141113,11.3766174316,
    -1.17234893799,-8.27346557617,11.3484265137,
    -1.39622787476,-8.22516601562,11.3337780762,
    -1.63945571899,-8.15007263184,11.3364404297,
    -1.90383621216,-8.04911010742,11.3618408203,
    -2.18985137939,-7.91938232422,11.4112902832,
    -2.49333221436,-7.75398742676,11.4804907227,
    -2.80393371582,-7.54937744141,11.5679736328,
    -3.11656738281,-7.30242248535,11.6664123535,
    -3.4310925293,-7.00961791992,11.7675695801,
    -3.73693756104,-6.67359191895,11.8773156738,
    -4.02311981201,-6.29237304688,11.9939208984,
    -4.28774291992,-5.86274169922,12.1173278809,
    -4.52488555908,-5.39258666992,12.2475170898,
    -4.72642181396,-4.89287017822,12.3753356934,
    -4.89377593994,-4.3635446167,12.4974291992,
    -5.02793792725,-3.80485137939,12.6132507324,
    -5.12477905273,-3.22044189453,12.7203771973,
    -5.1921862793,-2.61500427246,12.8171972656,
    -5.18656677246,-1.9839402771,12.9055822754,
    -5.14261291504,-1.34387985229,12.9819018555,
    -5.04352722168,-0.694447021484,13.0440686035,
    -4.88836669922,-0.0426831388474,13.0936669922,
    -4.67811096191,0.604080085754,13.1285083008,
    -4.42639465332,1.24572723389,13.1492663574,
    -4.10660461426,1.84327804565,13.144152832,
    -3.73688415527,2.41457977295,13.1235961914,
    -3.31863830566,2.94286682129,13.0895202637,
    -2.85810974121,3.4104888916,13.034967041,
    -2.37996307373,3.8418145752,12.9650073242,
    -1.8847543335,4.22283935547,12.8711376953,
    -1.37963790894,4.54741271973,12.7526611328,
    -0.87320930481,4.81581268311,12.6116455078,
    -0.362398834229,5.03642211914,12.4542175293,
    0.162090530396,5.21360168457,12.289074707,
    0.689463653564,5.34067321777,12.114831543,
    1.20702568054,5.41020751953,11.9281555176,
    1.71115951538,5.42096618652,11.7353601074,
    2.19682693481,5.37133178711,11.5406262207,
    2.661121521,5.26218566895,11.3444946289,
    3.10162109375,5.09938720703,11.1530078125,
    3.52051361084,4.88024017334,10.9749060059,
    3.91847076416,4.60355102539,10.8126940918,
    4.28360870361,4.28066436768,10.6619042969,
    4.60756774902,3.91699951172,10.5187072754,
    4.89060791016,3.51898925781,10.3839111328,
    5.13384460449,3.09629730225,10.2617578125,
    5.34116210938,2.64804992676,10.1553363037,
    5.51474121094,2.17550140381,10.0647857666,
    5.6533215332,1.68901138306,9.98995117188,
    5.7575402832,1.19387451172,9.92749145508,
    5.82712280273,0.69034538269,9.87202758789,
    5.85980285645,0.182524337769,9.82081665039,
    5.8546697998,-0.325656280518,9.7721887207,
    5.81276855469,-0.833526077271,9.72574401855,
    5.73606201172,-1.34203460693,9.68302185059,
    5.62622131348,-1.8519380188,9.64458496094,
    5.48286560059,-2.35919128418,9.60885925293,
    5.30612976074,-2.86062835693,9.57640991211,
    5.09963165283,-3.35432159424,9.54877502441,
    4.86524993896,-3.83012207031,9.52555603027,
    4.60444946289,-4.28032562256,9.50890441895,
    4.32382385254,-4.70080688477,9.50045715332,
    4.03051727295,-5.08621917725,9.49761901855,
    3.73284698486,-5.42874511719,9.4955657959,
    3.43706939697,-5.72602294922,9.49079956055,
    3.14937561035,-5.98524536133,9.48464355469,
    2.88203674316,-6.20690185547,9.47939880371,
    2.64065979004,-6.39391113281,9.47737182617,
    2.42688751221,-6.55309387207,9.48049987793,
    2.2426260376,-6.68601623535,9.48694091797,
    2.08640411377,-6.79095703125,9.49337890625,
    1.95664154053,-6.86679260254,9.49856994629,
    1.85317276001,-6.91441040039,9.50210266113,
    1.77431610107,-6.93584106445,9.50340942383,
    1.71632217407,-6.93613464355,9.50137817383,
    1.67535797119,-6.91633178711,9.49444885254,
    1.64707778931,-6.87566772461,9.48313171387,
    1.62947341919,-6.81975585938,9.47183898926,
    1.62041442871,-6.75357299805,9.46436645508,
    1.61660369873,-6.67691833496,9.45987731934,
    1.61491439819,-6.59274230957,9.45803710938,
    1.61281204224,-6.50482299805,9.46045837402,
    1.60887908936,-6.41276855469,9.46739257812,
    1.60109436035,-6.31829589844,9.47717590332,
    1.58918151855,-6.22532836914,9.4875402832,
    1.57597625732,-6.13700683594,9.49858703613,
    1.56555114746,-6.0563494873,9.51100036621,
    1.55962142944,-5.98503234863,9.52454406738,
    1.55720581055,-5.92125061035,9.53921020508,
    1.55625534058,-5.8633013916,9.55362060547,
    1.55507400513,-5.8107208252,9.5677947998,
    1.5530657959,-5.76069946289,9.5828918457,
    1.55030014038,-5.7117590332,9.60006713867,
    1.54706207275,-5.66687805176,9.62269958496,
    1.54263809204,-5.62907714844,9.65186401367,
    1.53828353882,-5.59697570801,9.6872479248,
    1.53455627441,-5.56854003906,9.73135498047,
    1.52964782715,-5.54440490723,9.7827532959,
    1.52391296387,-5.5273638916,9.83725585938,
    1.51910812378,-5.51874084473,9.89426452637,
    1.51581726074,-5.51730529785,9.95382629395,
    1.51493530273,-5.52063354492,10.01440979,
    1.51934921265,-5.52456298828,10.0774285889,
    1.53182922363,-5.53403625488,10.1415582275,
    1.54799514771,-5.55598327637,10.1981713867,
    1.56309112549,-5.58074157715,10.2488513184,
    1.58065216064,-5.59870239258,10.3025354004,
    1.59983078003,-5.61497497559,10.3583349609,
    1.61880874634,-5.63414978027,10.4118762207,
    1.63988861084,-5.6513458252,10.4631408691,
    1.66109130859,-5.66404907227,10.5127624512,
    1.67790786743,-5.67590209961,10.5588525391,
    1.68979141235,-5.6844317627,10.5985583496,
    1.69829833984,-5.68566589355,10.6311083984,
    1.70174667358,-5.68364013672,10.6551062012,
    1.69839706421,-5.68054931641,10.6683557129,
    1.68852798462,-5.67369750977,10.6722485352,
    1.67412338257,-5.66523803711,10.6681091309,
    1.65656494141,-5.66021179199,10.6551220703,
    1.63492370605,-5.65757263184,10.6314575195,
    1.60790802002,-5.65448852539,10.5944238281,
    1.57592681885,-5.6532244873,10.5421386719,
    1.54173461914,-5.65555419922,10.4738757324,
    1.50850097656,-5.66176513672,10.3917175293,
    1.47787826538,-5.67407348633,10.2984777832,
    1.44916412354,-5.6930456543,10.1953778076,
    1.41898086548,-5.72054260254,10.0827575684,
    1.38157669067,-5.75737243652,9.9620135498,
    1.33419784546,-5.8022064209,9.83704956055,
    1.28081802368,-5.85686096191,9.71268310547,
    1.22876945496,-5.9228503418,9.59559204102,
    1.18563102722,-6.00691955566,9.48941589355,
    1.14869941711,-6.09819152832,9.39874023438,
    1.11501701355,-6.19262756348,9.32090332031,
    1.09047241211,-6.31364196777,9.24686889648,
    1.06844520569,-6.44897888184,9.18005737305,
    1.04235931396,-6.58215820312,9.1217401123,
    1.01582267761,-6.71845458984,9.07041992188,
    0.990123748779,-6.85595397949,9.02552429199,
    0.966007614136,-6.99555114746,8.98489318848,
    0.946821746826,-7.14038269043,8.94817321777,
    0.935918197632,-7.28789489746,8.91411743164,
    0.931105270386,-7.4323614502,8.88315917969,
    0.928986740112,-7.57333496094,8.85564147949,
    0.926024627686,-7.71161499023,8.82952148438,
    0.919517211914,-7.84393798828,8.80351928711,
    0.911456069946,-7.97020935059,8.77837585449,
    0.902285919189,-8.08989501953,8.75454833984,
    0.892944793701,-8.20147460938,8.7323236084,
    0.886026535034,-8.30946594238,8.71244812012,
    0.881322250366,-8.41163574219,8.69460327148,
    0.878605957031,-8.50372375488,8.67861450195,
    0.877007064819,-8.59141296387,8.66595397949,
    0.876851882935,-8.67414855957,8.65752807617,
    0.879142303467,-8.74902648926,8.6524017334,
    0.881378173828,-8.81864929199,8.64976989746,
    0.881878509521,-8.88256713867,8.6481072998,
    0.882558288574,-8.93773254395,8.64583068848,
    0.885935058594,-8.98528991699,8.64411315918,
    0.891122055054,-9.02781188965,8.64277954102,
    0.893695831299,-9.06060241699,8.64096618652,
    0.890547637939,-9.08348815918,8.63760009766,
    0.883629989624,-9.10085083008,8.63156738281,
    0.877832565308,-9.11254089355,8.62497314453,
    0.871530532837,-9.11944335938,8.61907165527,
    0.86272895813,-9.12440307617,8.61403930664,
    0.856759643555,-9.12687866211,8.60985473633,
    0.854175720215,-9.12463989258,8.6065411377,
    0.852533950806,-9.12032775879,8.60519958496,
    0.85303527832,-9.11504516602,8.6049432373,
    0.854300384521,-9.10581176758,8.60425537109,
    0.854755859375,-9.09311157227,8.60360107422,
    0.855485153198,-9.07814941406,8.60375305176,
    0.857181625366,-9.06150146484,8.60387023926,
    0.860583190918,-9.0460559082,8.60411743164,
    0.864331207275,-9.03071228027,8.60541931152,
    0.86788520813,-9.01257995605,8.6073815918,
    0.871999740601,-8.99552368164,8.60892211914,
    0.875685424805,-8.9808203125,8.60872192383,
    0.878679656982,-8.96391235352,8.60841430664,
    0.880854187012,-8.94440124512,8.60823059082,
    0.882037582397,-8.92498291016,8.60632568359,
    0.881879348755,-8.90563964844,8.6036541748,
    0.882621841431,-8.88788879395,8.60097229004,
    0.886142959595,-8.87232910156,8.59784973145,
    0.888971252441,-8.85601867676,8.59418884277,
    0.890788116455,-8.8402734375,8.59019714355,
    0.893799438477,-8.82471008301,8.58469909668,
    0.896648330688,-8.80903930664,8.57516113281,
    0.898450546265,-8.79551147461,8.56088317871,
    0.900065994263,-8.78287963867,8.54374084473,
    0.900844802856,-8.76750183105,8.52402526855,
    0.900662155151,-8.7498034668,8.50102539062,
    0.900394744873,-8.73333679199,8.47606689453,
    0.897660751343,-8.71707885742,8.45106018066,
    0.89021156311,-8.69773925781,8.42629516602,
    0.879491577148,-8.67172424316,8.4000567627,
    0.865550537109,-8.63873413086,8.37469482422,
    0.84508895874,-8.60049560547,8.35229431152,
    0.815378341675,-8.55292907715,8.33124145508,
    0.778857574463,-8.49552062988,8.31305419922,
    0.739814224243,-8.43500061035,8.29894042969,
    0.697442626953,-8.36845397949,8.28965393066,
    0.652526092529,-8.28797607422,8.28699462891,
    0.605198707581,-8.20230285645,8.29208251953,
    0.556689949036,-8.11489196777,8.30390808105,
    0.518157653809,-8.01589599609,8.32038085938,
    0.496514930725,-7.90417236328,8.34016845703,
    0.489306106567,-7.78744506836,8.36110107422,
    0.490294151306,-7.68100524902,8.38279968262,
    0.498574867249,-7.51220825195,8.41713134766,
    0.526952018738,-7.43669372559,8.42556213379,
    0.563703422546,-7.26275268555,8.44717834473,
    0.606810302734,-7.09633178711,8.466875,
    0.654786529541,-6.93228210449,8.48320922852,
    0.705610580444,-6.76477905273,8.49485656738,
    0.759018249512,-6.59278259277,8.50198974609,
    0.814185256958,-6.41801879883,8.5070880127,
    0.868899841309,-6.2396295166,8.5108001709,
    0.921398010254,-6.06366394043,8.50951721191,
    0.970304946899,-5.88628295898,8.50553955078,
    1.01635780334,-5.69645446777,8.50629089355,
    1.05833518982,-5.50720825195,8.50852233887,
    1.09152290344,-5.32240722656,8.50843811035,
    1.11719863892,-5.13523803711,8.50830322266,
    1.1364138031,-4.94974731445,8.50851989746,
    1.14512275696,-4.76493560791,8.51031982422,
    1.14356201172,-4.58014892578,8.51355102539,
    1.13444488525,-4.40265930176,8.51679382324,
    1.11624710083,-4.23385253906,8.52205810547,
    1.08638397217,-4.0704901123,8.53108032227,
    1.04496566772,-3.91639343262,8.5429675293,
    0.992111587524,-3.77488830566,8.55634033203,
    0.927308044434,-3.64014282227,8.57053222656,
    0.852133407593,-3.50638916016,8.58307495117,
    0.767341537476,-3.37726745605,8.58953430176,
    0.671940536499,-3.25854187012,8.58947265625,
    0.563658294678,-3.1427456665,8.59040527344,
    0.447562217712,-3.03676239014,8.59406738281,
    0.325351333618,-2.95897094727,8.59080566406,
    0.189207744598,-2.89496459961,8.58267883301,
    0.0469760036469,-2.83326721191,8.58022216797,
    -0.0963946819305,-2.7800100708,8.58386291504,
    -0.244060249329,-2.73282104492,8.59041748047,
    -0.391814613342,-2.68847503662,8.59868164062,
    -0.538574752808,-2.64565368652,8.6094720459,
    -0.68419128418,-2.60014434814,8.62303344727,
    -0.830102844238,-2.55399642944,8.63565734863,
    -0.976563720703,-2.51292129517,8.6465612793,
    -1.12083648682,-2.47638473511,8.65624694824,
    -1.26411109924,-2.43965515137,8.66329345703,
    -1.40794631958,-2.40083557129,8.66951293945,
    -1.55212142944,-2.36508148193,8.67714111328,
    -1.69076583862,-2.30062454224,8.69417358398,
    -1.83255691528,-2.29550567627,8.68159912109,
    -1.97146209717,-2.26351486206,8.68244750977,
    -2.10878341675,-2.226769104,8.6809375,
    -2.24488464355,-2.18685623169,8.67713806152,
    -2.37935241699,-2.1460319519,8.67126708984,
    -2.51211471558,-2.10774505615,8.66351318359,
    -2.64375030518,-2.07039459229,8.65380249023,
    -2.77520233154,-2.03161361694,8.64175109863,
    -2.90687774658,-1.99331207275,8.62669799805,
    -3.03827697754,-1.95392425537,8.60815246582
};

GLuint AnkleArrayID;
// Array to fill with the converted vertices
static GLfloat g_vertex_ankle_buffer[NUM_COORDS * NUM_MULT];
GLuint vertexbuffer;

int g_width, g_height;
float sTheta;
// TODO (leia): remove
int gMat = 0;
int light_x = -2;
int t = 0;

// Eye vectors for viewpoint moving
Vector3f eye = Vector3f();
Vector3f lookAtPt = Vector3f();
Vector3f up = Vector3f(0, 1, 0);
Vector3f eye_forward = Vector3f();
Vector3f eye_right = Vector3f();

GLboolean lock_view = false;
GLboolean lock_y = true;

float phi = 0;
float theta = -M_PI / 2;

static void error_callback(int error, const char *description)
{
  cerr << description << endl;
}

static void calculate_directions()
{
  eye_forward = lookAtPt - eye;
  if (lock_y) {
    eye_forward[1] = 0.0;
  }
  eye_forward.normalize();
  eye_right = Vector3f(-eye_forward.z(), eye_forward.y(), eye_forward.x());
  if (lock_y) {
    eye_right[1] = 0.0;
  }
}

static void key_callback(GLFWwindow *window, int key, int scancode, int action, int mods)
{
  if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
    glfwSetWindowShouldClose(window, GL_TRUE);
  } else if (key == GLFW_KEY_A) {
    eye -= eye_right / 5; // Move eye left
  } else if (key == GLFW_KEY_D) {
    eye += eye_right / 5; // Move eye right
  } else if (key == GLFW_KEY_W) {
    eye += eye_forward / 5; // Move eye forward
  } else if (key == GLFW_KEY_S) {
    eye -= eye_forward / 5; // Move eye backward
  } else if (key == GLFW_KEY_L && action == GLFW_PRESS) {
    lock_view = !lock_view; // lock the viewpoint
  } else if (key == GLFW_KEY_Y && action == GLFW_PRESS) {
    lock_y = !lock_y; // lock the eye in the y axis
  } else if (key == GLFW_KEY_RIGHT) {
    // theta defines l/r of the view. Positive to the right.
    theta += .1; // turn eye to the right
  } else if (key == GLFW_KEY_LEFT) {
    theta -= .1; // turn the eye to the left
  } else if (key == GLFW_KEY_UP) {
    // phi defines u/d of the view. Positive up.
    phi += .1; // turn the eye upward
  } else if (key == GLFW_KEY_DOWN) {
    phi -= .1; // turn the eye downward
  }
}

static void mouse_track(GLFWwindow *window) {
  /* Removed viewpoint mechanics here */
}


static void resize_callback(GLFWwindow *window, int width, int height) {
  g_width = width;
  g_height = height;
  glViewport(0, 0, width, height);
}

//helper function to set materials
void SetMaterial(int i)
{
  // TODO (leia): remove this when I change the shader
  switch (i) {
  case 0: // grass
    glUniform3f(prog->getUniform("MatAmb"), 0.02, 0.54, 0.2);
    glUniform3f(prog->getUniform("MatDif"), 0.0, 0.76, 0.9);
    glUniform3f(prog->getUniform("MatSpec"), 0.0, 0.0, 0.0);
    glUniform1f(prog->getUniform("shine"), 00.0);
    break;
  case 1: // pink fur
    glUniform3f(prog->getUniform("MatAmb"), 0.53, 0.13, 0.14);
    glUniform3f(prog->getUniform("MatDif"), 0.5, 0.2, 0.2);
    glUniform3f(prog->getUniform("MatSpec"), 0.3, 0.3, 0.4);
    glUniform1f(prog->getUniform("shine"), 4.0);
    break;
  }
}

static void printVertices() {
  printf("Original vertices: \n");
  for (int i = 0; i < NUM_COORDS; i++) {
    printf("OG_VERTEX: %f\n", (float)(ankle_buffer[i]));
  }
}

static void printNewVertices() {
  printf("New vertices: \n");
  for (int i = 0; i < NUM_COORDS * NUM_MULT; i++) {
    printf("i = %d: %f\n", i, (float)(g_vertex_ankle_buffer[i]));
  }
  printf("done printing\n");
}

static void convertVertices() {
  GLfloat ax, ay, az, prime_ay, bx, by, bz, prime_by;
  int j = 0;
  int i;
  for (i = 0; i < NUM_COORDS - 3; i = i + 3) {
    ax = ankle_buffer[i];
    ay = ankle_buffer[i + 1];
    az = ankle_buffer[i + 2];
    bx = ankle_buffer[i + 3];
    by = ankle_buffer[i + 4];
    bz = ankle_buffer[i + 5];
    prime_ay = ay - .5;
    prime_by = by - .5;

    // Push A
    g_vertex_ankle_buffer[j++] = ax;
    g_vertex_ankle_buffer[j++] = ay;
    g_vertex_ankle_buffer[j++] = az;

    // Push A'
    g_vertex_ankle_buffer[j++] = ax;
    g_vertex_ankle_buffer[j++] = prime_ay;
    g_vertex_ankle_buffer[j++] = az;

    // Push B
    g_vertex_ankle_buffer[j++] = bx;
    g_vertex_ankle_buffer[j++] = by;
    g_vertex_ankle_buffer[j++] = bz;

    // Push B
    g_vertex_ankle_buffer[j++] = bx;
    g_vertex_ankle_buffer[j++] = by;
    g_vertex_ankle_buffer[j++] = bz;

    // Push A'
    g_vertex_ankle_buffer[j++] = ax;
    g_vertex_ankle_buffer[j++] = prime_ay;
    g_vertex_ankle_buffer[j++] = az;

    // Push B'
    g_vertex_ankle_buffer[j++] = bx;
    g_vertex_ankle_buffer[j++] = prime_by;
    g_vertex_ankle_buffer[j++] = bz;

  }
  // printf("Converted vertices, i = %d\n", i);
}

static void initGeom() {
  //generate the VAO
  glGenVertexArrays(1, &AnkleArrayID);
  glBindVertexArray(AnkleArrayID);

  //generate vertex buffer to hand off to OGL
  /* TODO (leia): do the vertex buffer change here. Since each vertex is passed in via
      three floats, I'll have to deal with them in triplets.
      Do I need to write some extra helper functions to do that?
      I might want to.

      Remember that cpp doesn't allow arrays to be mutated.
      dynamic arrays?
      I shouldn't even need dynamic: we know the fixed size.
      */

  printVertices();
  convertVertices();
  printNewVertices();

  glGenBuffers(1, &vertexbuffer);
  //set the current state to focus on our vertex buffer
  glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
  //actually memcopy the data - only do this once
  glBufferData(GL_ARRAY_BUFFER, sizeof(g_vertex_ankle_buffer), g_vertex_ankle_buffer, GL_DYNAMIC_DRAW);
  //glBufferData(GL_ARRAY_BUFFER, sizeof(ankle_buffer), ankle_buffer, GL_DYNAMIC_DRAW);
}

static void init()
{
  GLSL::checkVersion();

  sTheta = 0;
  // Set background color.
  glClearColor(.12f, .34f, .56f, 1.0f);
  // Enable z-buffer test.
  glEnable(GL_DEPTH_TEST);

  initGeom();

  // Initialize the GLSL program.
  prog = make_shared<Program>();
  prog->setVerbose(true);
  prog->setShaderNames(RESOURCE_DIR + "simple_vert.glsl", RESOURCE_DIR + "simple_frag.glsl");
  prog->init();
  prog->addUniform("P");
  prog->addUniform("M");
  prog->addUniform("V");

  /* TODO(leia): Eventually just take this out */
  prog->addUniform("MatAmb");
  prog->addUniform("MatDif");
  prog->addUniform("MatSpec");
  prog->addUniform("shine");
  prog->addAttribute("vertPos");
  prog->addAttribute("vertNor");
  prog->addUniform("light_x");
}

static void render()
{
  // Get current frame buffer size.
  int width, height;
  glfwGetFramebufferSize(window, &width, &height);
  glViewport(0, 0, width, height);

  // Clear framebuffer.
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

  float aspect = width / (float)height;

  // Create the matrix stacks
  auto P = make_shared<MatrixStack>();
  auto M = make_shared<MatrixStack>();
  auto V = make_shared<MatrixStack>();

  // Apply perspective projection.
  P->pushMatrix();
  P->perspective(45.0f, aspect, 0.01f, 100.0f);

  // bind this program, start drawing perspective
  prog->bind();
  glUniformMatrix4fv(prog->getUniform("P"), 1, GL_FALSE, P->topMatrix().data());
  glUniform1i(prog->getUniform("light_x"), light_x);

  // mouse_track(window);
  lookAtPt = Vector3f(cos(phi) * cos (theta), sin(phi), cos(phi) * cos((M_PI / 2) - theta)) + eye;
  calculate_directions();

  V->lookAt(eye, lookAtPt, up);
  glUniformMatrix4fv(prog->getUniform("V"), 1, GL_FALSE, V->topMatrix().data());

  M->pushMatrix();
  M->loadIdentity();

  //draw the triangles
  SetMaterial(1);
  //set up pulling of vertices
  glEnableVertexAttribArray(0);
  glBindBuffer(GL_ARRAY_BUFFER, vertexbuffer);
  //function to get # of elements at a time
  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, (void*) 0);
  glDrawArrays(GL_TRIANGLES, 0, NUM_COORDS * NUM_MULT);
  glDisableVertexAttribArray(0);

  //draw the cube with these 'global transforms'
  SetMaterial(1);
  M->translate(Vector3f(0, 0, -5));
    glUniformMatrix4fv(prog->getUniform("M"), 1, GL_FALSE, M->topMatrix().data());
    //cube->draw(prog);
  M->popMatrix();

  // Pop matrix stacks.
  P->popMatrix();
  //V->popMatrix();

  prog->unbind();

  if (sTheta > -70) {
    sTheta -= 0.5;
  }
  t++;
}

int main(int argc, char **argv)
{
  if (argc < 2) {
    cout << "Please specify the resource directory." << endl;
    return 0;
  }
  RESOURCE_DIR = argv[1] + string("/");

  // Set error callback.
  glfwSetErrorCallback(error_callback);
  // Initialize the library.
  if (!glfwInit()) {
    return -1;
  }
  //request the highest possible version of OGL - important for mac
  glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
  glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
  glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);

  // Create a windowed mode window and its OpenGL context.
  g_width = 640;
  g_height = 480;
  window = glfwCreateWindow(640, 480, "Draw The Thing", NULL, NULL);
  if (!window) {
    glfwTerminate();
    return -1;
  }
  // Make the window's context current.
  glfwMakeContextCurrent(window);
  // Initialize GLEW.
  glewExperimental = true;
  if (glewInit() != GLEW_OK) {
    cerr << "Failed to initialize GLEW" << endl;
    return -1;
  }
  //weird bootstrap of glGetError
  glGetError();
  cout << "OpenGL version: " << glGetString(GL_VERSION) << endl;
  cout << "GLSL version: " << glGetString(GL_SHADING_LANGUAGE_VERSION) << endl;

  // Set vsync.
  glfwSwapInterval(1);
  // Set keyboard callback.
  glfwSetKeyCallback(window, key_callback);
  glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
  //set the window resize call back
  glfwSetFramebufferSizeCallback(window, resize_callback);

  // Initialize scene. Note that geometry initialized in init now
  init();

  // Loop until the user closes the window.
  while (!glfwWindowShouldClose(window)) {
    // Render scene.
    render();
    // Swap front and back buffers.
    glfwSwapBuffers(window);
    // Poll for and process events.
    glfwPollEvents();
  }
  // Quit program.
  glfwDestroyWindow(window);
  glfwTerminate();
  return 0;
}
